name: Memory Server CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: 'read'
  packages: 'write'
  id-token: 'write'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/lucienbrule/memory-server
  GCR_REGISTRY: us-central1-docker.pkg.dev
  GCR_REPOSITORY: daemon-docker/memory-server

jobs:
  # 1) Run unit tests per module
  test:
    name: Test ${{ matrix.module }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - memory-cli
          - memory-core
          - memory-lib
          - memory-proxy
          - memory-server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Set up JDK 21 (GraalVM)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'graalvm'
          cache: 'gradle'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Run tests for ${{ matrix.module }}
        run: ./gradlew :${{ matrix.module }}:test

  # 2) Build each module (skip tests)
  build-modules:
    name: Build ${{ matrix.module }}
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        module:
          - memory-cli
          - memory-core
          - memory-lib
          - memory-proxy
          - memory-server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Set up JDK 21 (GraalVM)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'graalvm'
          cache: 'gradle'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build ${{ matrix.module }}
        run: ./gradlew :${{ matrix.module }}:build -x test

  # 3) Build & publish native container for memory-server
  build-and-publish:
    name: Build Native Image & Publish to GHCR
    runs-on: ubuntu-latest
    needs: build-modules
    outputs:
      image-tag: ${{ steps.set-image-tag.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Set up JDK 21 (GraalVM)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'graalvm'
          cache: 'gradle'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Set IMAGE_TAG
        id: set-image-tag
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          echo "IMAGE_TAG=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build native image & container for memory-server
        run: |
          ./gradlew build \
            --info --stacktrace \
            -x test -x intTest \
            -Dquarkus.native.enabled=true \
            -Dquarkus.package.jar.enabled=false \
            -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.registry=${REGISTRY} \
            -Dquarkus.container-image.group=${{ github.repository_owner }} \
            -Dquarkus.container-image.name=memory-server \
            -Dquarkus.container-image.tag=${{ env.IMAGE_TAG }} \
            -Dquarkus.container-image.additional-tags=latest \
            -Dquarkus.container-image.push=true

  # Mirror to GCP Artifact Registry
  mirror-to-gcp:
    name: Mirror GHCR Image to Artifact Registry
    runs-on: ubuntu-latest
    needs: build-and-publish
    env:
      IMAGE_TAG: ${{ needs.build-and-publish.outputs.image-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: docker-credential-gcr

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCR_REGISTRY }} --quiet

      - name: Pull GHCR image
        run: docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Tag and push to GCR (short SHA)
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.GCR_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.GCR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.GCR_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.GCR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Tag and push to GCR (latest)
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.GCR_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.GCR_REPOSITORY }}:latest
          docker push ${{ env.GCR_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.GCR_REPOSITORY }}:latest
  # 5) Create a GitHub Release for native binaries
  release:
    name: Create native-binaries release
    runs-on: ubuntu-latest
    needs: build-modules
    steps:
      - name: Create GitHub Release
        id: make_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: native-binaries-${{ github.sha }}
          release_name: Native binaries ${{ github.sha }}
    outputs:
      upload_url: ${{ steps.make_release.outputs.upload_url }}

  # 6) Build & upload native binaries (Linux + macOS, all three modules)
  release-binaries:
    name: Upload native binaries
    runs-on: ${{ matrix.os }}
    needs:
      - build-modules
      - release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        module: [memory-cli, memory-proxy, memory-server]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21 (GraalVM)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'graalvm'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build ${{ matrix.module }} native
        run: |
          ./gradlew :${{ matrix.module }}:build \
            -x test -x intTest \
            -Dquarkus.native.enabled=true \
            -Dquarkus.package.jar.enabled=false

      - name: Upload ${{ matrix.module }} binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ matrix.module }}/build/${{ matrix.module }}-runner
          asset_name: ${{ matrix.module }}-${{ matrix.os }}-${{ github.sha }}
          asset_content_type: application/octet-stream